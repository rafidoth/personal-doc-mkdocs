{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"leetcode/leetcode888/","title":"888 Fair Candy Swap","text":""},{"location":"leetcode/leetcode888/#naive-approach","title":"Naive Approach","text":"<p>For each element of <code>aliceSizes</code> array look into <code>bobSizes</code> and check if any one combination makes the both sum equals.</p>"},{"location":"leetcode/leetcode888/#code","title":"Code","text":"<pre><code>for each x of aliceSizes[]\n    for each y of bobSizes[]\n        if aliceSum - y + x == bobSum -x +y\n            return x and y\n</code></pre> <pre><code>vector&lt;int&gt; fairCandySwapNaive(vector&lt;int&gt;&amp; aliceSizes, vector&lt;int&gt;&amp; bobSizes) {\n    int aliceSum = 0;\n    for(int x : aliceSizes) aliceSum+= x;\n    int bobSum= 0;\n    for(int x : bobSizes) bobSum+= x;\n    vector&lt;int&gt; answer;\n\n    for (int i = 0; i &lt;(int) aliceSizes.size(); ++i) {\n        int aTemp = aliceSizes[i];\n        for (int m = 0; m &lt;(int) bobSizes.size(); ++m) {\n            int bTemp = bobSizes[m];\n            int newAliceSum = aliceSum - aTemp + bTemp;\n            int newBobSum = bobSum - bTemp + aTemp;\n            if (newAliceSum == newBobSum) {\n                answer.push_back(aTemp);\n                answer.push_back(bTemp);\n                return answer;\n            }\n        }\n    }\n    return answer;\n}\n</code></pre>"}]}